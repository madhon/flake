# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master

pool:
  vmImage: 'Ubuntu-20.04'

variables:
  BuildConfiguration: 'release'
  BuildPlatform: 'any cpu'

steps:
  - task: UseDotNet@2
    displayName: "Use .Net Core SDK 5.0"
    inputs:
      packageType: 'sdk'
      version: '5.0.x'
  - task: DotNetCoreCLI@2
    displayName: "Restore Packages"
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      feedsToUse: 'select'
      verbosityRestore: 'Quiet'
    env:      
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  - task: DotNetCoreCLI@2
    displayName: "Build Project in $(BuildConfiguration) mode"
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration $(BuildConfiguration)'
    env:      
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  - task: DotNetCoreCLI@2
    displayName: "Unit testing"
    inputs:
      command: 'test'
      projects: 'Flake.Tests/Flake.Tests.csproj'
      arguments: '--configuration $(BuildConfiguration) --no-restore --no-build --collect:"XPlat Code Coverage" '
    env:      
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1      
  - script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8'  
    displayName: 'Install ReportGenerator tool'  
  - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'  
    displayName: 'Create reports'  
  - task: PublishCodeCoverageResults@1  
    displayName: 'Publish code coverage'  
    inputs:  
      codeCoverageTool: Cobertura  
      summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'    